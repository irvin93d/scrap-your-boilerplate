/* tslint:disable */
// generated by typescript-json-validator
import Ajv from 'ajv'
import { inspect } from 'util'

import { Person } from './Person'
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: 'fast',
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
})

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))

export const PersonSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  defaultProperties: [],
  properties: {
    address: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    type: {
      enum: ['person'],
      type: 'string',
    },
  },
  required: ['address', 'name', 'type'],
  type: 'object',
}
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, 'errors'>
export const isPerson = ajv.compile(PersonSchema) as ValidateFunction<Person>
export function validatePerson(value: unknown): Person {
  if (isPerson(value)) {
    return value
  } else {
    throw new Error(
      ajv.errorsText(
        isPerson.errors!.filter((e: any) => e.keyword !== 'if'),
        { dataVar: 'Person' },
      ) +
        '\n\n' +
        inspect(value),
    )
  }
}
